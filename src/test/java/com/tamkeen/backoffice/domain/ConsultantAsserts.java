package com.tamkeen.backoffice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ConsultantAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultantAllPropertiesEquals(Consultant expected, Consultant actual) {
        assertConsultantAutoGeneratedPropertiesEquals(expected, actual);
        assertConsultantAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultantAllUpdatablePropertiesEquals(Consultant expected, Consultant actual) {
        assertConsultantUpdatableFieldsEquals(expected, actual);
        assertConsultantUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultantAutoGeneratedPropertiesEquals(Consultant expected, Consultant actual) {
        assertThat(expected)
            .as("Verify Consultant auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultantUpdatableFieldsEquals(Consultant expected, Consultant actual) {
        assertThat(expected)
            .as("Verify Consultant relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getExpertise()).as("check expertise").isEqualTo(actual.getExpertise()))
            .satisfies(e -> assertThat(e.getBio()).as("check bio").isEqualTo(actual.getBio()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()))
            .satisfies(e -> assertThat(e.getServicesOffered()).as("check servicesOffered").isEqualTo(actual.getServicesOffered()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertConsultantUpdatableRelationshipsEquals(Consultant expected, Consultant actual) {
        // empty method
    }
}
