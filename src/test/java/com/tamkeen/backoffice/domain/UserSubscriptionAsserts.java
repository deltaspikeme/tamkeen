package com.tamkeen.backoffice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserSubscriptionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAllPropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertUserSubscriptionAutoGeneratedPropertiesEquals(expected, actual);
        assertUserSubscriptionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAllUpdatablePropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertUserSubscriptionUpdatableFieldsEquals(expected, actual);
        assertUserSubscriptionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionAutoGeneratedPropertiesEquals(UserSubscription expected, UserSubscription actual) {
        assertThat(expected)
            .as("Verify UserSubscription auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionUpdatableFieldsEquals(UserSubscription expected, UserSubscription actual) {
        assertThat(expected)
            .as("Verify UserSubscription relevant properties")
            .satisfies(e -> assertThat(e.getSubscriptionType()).as("check subscriptionType").isEqualTo(actual.getSubscriptionType()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserSubscriptionUpdatableRelationshipsEquals(UserSubscription expected, UserSubscription actual) {
        // empty method
    }
}
